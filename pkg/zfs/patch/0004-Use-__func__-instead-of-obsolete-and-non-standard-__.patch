From 3b0d7aec7e04881005dcf07f12054cc65c2d3587 Mon Sep 17 00:00:00 2001
From: Michael Forney <mforney@mforney.org>
Date: Sat, 21 Jan 2023 17:12:32 -0800
Subject: [PATCH] Use __func__ instead of obsolete and non-standard
 __FUNCTION__

---
 include/os/freebsd/spl/sys/debug.h | 18 +++++++++---------
 include/os/linux/spl/sys/debug.h   | 18 +++++++++---------
 lib/libspl/include/assert.h        | 18 +++++++++---------
 module/os/freebsd/zfs/crypto_os.c  | 22 +++++++++++-----------
 module/os/freebsd/zfs/zfs_vfsops.c |  4 ++--
 module/os/freebsd/zfs/zio_crypt.c  |  6 +++---
 6 files changed, 43 insertions(+), 43 deletions(-)

diff --git a/include/os/freebsd/spl/sys/debug.h b/include/os/freebsd/spl/sys/debug.h
index 3e67cf0e9..4bb62224e 100644
--- a/include/os/freebsd/spl/sys/debug.h
+++ b/include/os/freebsd/spl/sys/debug.h
@@ -75,18 +75,18 @@ spl_assert(const char *buf, const char *file, const char *func, int line)
 #define	unlikely(expr) expect((expr) != 0, 0)
 
 #define	PANIC(fmt, a...)						\
-	spl_panic(__FILE__, __FUNCTION__, __LINE__, fmt, ## a)
+	spl_panic(__FILE__, __func__, __LINE__, fmt, ## a)
 
 #define	VERIFY(cond)							\
 	(void) (unlikely(!(cond)) &&					\
 	    spl_assert("VERIFY(" #cond ") failed\n",			\
-	    __FILE__, __FUNCTION__, __LINE__))
+	    __FILE__, __func__, __LINE__))
 
 #define	VERIFY3B(LEFT, OP, RIGHT)	do {				\
 		const boolean_t _verify3_left = (boolean_t)(LEFT);	\
 		const boolean_t _verify3_right = (boolean_t)(RIGHT);	\
 		if (unlikely(!(_verify3_left OP _verify3_right)))	\
-		    spl_panic(__FILE__, __FUNCTION__, __LINE__,		\
+		    spl_panic(__FILE__, __func__, __LINE__,		\
 		    "VERIFY3(" #LEFT " "  #OP " "  #RIGHT ") "		\
 		    "failed (%d " #OP " %d)\n",				\
 		    (boolean_t)(_verify3_left),				\
@@ -97,7 +97,7 @@ spl_assert(const char *buf, const char *file, const char *func, int line)
 		const int64_t _verify3_left = (int64_t)(LEFT);		\
 		const int64_t _verify3_right = (int64_t)(RIGHT);	\
 		if (unlikely(!(_verify3_left OP _verify3_right)))	\
-		    spl_panic(__FILE__, __FUNCTION__, __LINE__,		\
+		    spl_panic(__FILE__, __func__, __LINE__,		\
 		    "VERIFY3(" #LEFT " "  #OP " "  #RIGHT ") "		\
 		    "failed (%lld " #OP " %lld)\n",			\
 		    (long long) (_verify3_left),			\
@@ -108,7 +108,7 @@ spl_assert(const char *buf, const char *file, const char *func, int line)
 		const uint64_t _verify3_left = (uint64_t)(LEFT);	\
 		const uint64_t _verify3_right = (uint64_t)(RIGHT);	\
 		if (unlikely(!(_verify3_left OP _verify3_right)))	\
-		    spl_panic(__FILE__, __FUNCTION__, __LINE__,		\
+		    spl_panic(__FILE__, __func__, __LINE__,		\
 		    "VERIFY3(" #LEFT " "  #OP " "  #RIGHT ") "		\
 		    "failed (%llu " #OP " %llu)\n",			\
 		    (unsigned long long) (_verify3_left),		\
@@ -119,7 +119,7 @@ spl_assert(const char *buf, const char *file, const char *func, int line)
 		const uintptr_t _verify3_left = (uintptr_t)(LEFT);	\
 		const uintptr_t _verify3_right = (uintptr_t)(RIGHT);	\
 		if (unlikely(!(_verify3_left OP _verify3_right)))	\
-		    spl_panic(__FILE__, __FUNCTION__, __LINE__,		\
+		    spl_panic(__FILE__, __func__, __LINE__,		\
 		    "VERIFY3(" #LEFT " "  #OP " "  #RIGHT ") "		\
 		    "failed (%px " #OP " %px)\n",			\
 		    (void *) (_verify3_left),				\
@@ -130,7 +130,7 @@ spl_assert(const char *buf, const char *file, const char *func, int line)
 		const int64_t _verify3_left = (int64_t)(0);		\
 		const int64_t _verify3_right = (int64_t)(RIGHT);	\
 		if (unlikely(!(_verify3_left == _verify3_right)))	\
-		    spl_panic(__FILE__, __FUNCTION__, __LINE__,		\
+		    spl_panic(__FILE__, __func__, __LINE__,		\
 		    "VERIFY0(0 == " #RIGHT ") "				\
 		    "failed (0 == %lld)\n",				\
 		    (long long) (_verify3_right));			\
@@ -170,11 +170,11 @@ spl_assert(const char *buf, const char *file, const char *func, int line)
 #define	IMPLY(A, B) \
 	((void)(likely((!(A)) || (B)) ||				\
 	    spl_assert("(" #A ") implies (" #B ")",			\
-	    __FILE__, __FUNCTION__, __LINE__)))
+	    __FILE__, __func__, __LINE__)))
 #define	EQUIV(A, B) \
 	((void)(likely(!!(A) == !!(B)) || 				\
 	    spl_assert("(" #A ") is equivalent to (" #B ")",		\
-	    __FILE__, __FUNCTION__, __LINE__)))
+	    __FILE__, __func__, __LINE__)))
 
 
 #endif /* NDEBUG */
diff --git a/include/os/linux/spl/sys/debug.h b/include/os/linux/spl/sys/debug.h
index 007238574..ff5d65b0f 100644
--- a/include/os/linux/spl/sys/debug.h
+++ b/include/os/linux/spl/sys/debug.h
@@ -79,18 +79,18 @@ spl_assert(const char *buf, const char *file, const char *func, int line)
 }
 
 #define	PANIC(fmt, a...)						\
-	spl_panic(__FILE__, __FUNCTION__, __LINE__, fmt, ## a)
+	spl_panic(__FILE__, __func__, __LINE__, fmt, ## a)
 
 #define	VERIFY(cond)							\
 	(void) (unlikely(!(cond)) &&					\
 	    spl_assert("VERIFY(" #cond ") failed\n",			\
-	    __FILE__, __FUNCTION__, __LINE__))
+	    __FILE__, __func__, __LINE__))
 
 #define	VERIFY3B(LEFT, OP, RIGHT)	do {				\
 		const boolean_t _verify3_left = (boolean_t)(LEFT);	\
 		const boolean_t _verify3_right = (boolean_t)(RIGHT);	\
 		if (unlikely(!(_verify3_left OP _verify3_right)))	\
-		    spl_panic(__FILE__, __FUNCTION__, __LINE__,		\
+		    spl_panic(__FILE__, __func__, __LINE__,		\
 		    "VERIFY3(" #LEFT " "  #OP " "  #RIGHT ") "		\
 		    "failed (%d " #OP " %d)\n",				\
 		    (boolean_t)(_verify3_left),				\
@@ -101,7 +101,7 @@ spl_assert(const char *buf, const char *file, const char *func, int line)
 		const int64_t _verify3_left = (int64_t)(LEFT);		\
 		const int64_t _verify3_right = (int64_t)(RIGHT);	\
 		if (unlikely(!(_verify3_left OP _verify3_right)))	\
-		    spl_panic(__FILE__, __FUNCTION__, __LINE__,		\
+		    spl_panic(__FILE__, __func__, __LINE__,		\
 		    "VERIFY3(" #LEFT " "  #OP " "  #RIGHT ") "		\
 		    "failed (%lld " #OP " %lld)\n",			\
 		    (long long)(_verify3_left),				\
@@ -112,7 +112,7 @@ spl_assert(const char *buf, const char *file, const char *func, int line)
 		const uint64_t _verify3_left = (uint64_t)(LEFT);	\
 		const uint64_t _verify3_right = (uint64_t)(RIGHT);	\
 		if (unlikely(!(_verify3_left OP _verify3_right)))	\
-		    spl_panic(__FILE__, __FUNCTION__, __LINE__,		\
+		    spl_panic(__FILE__, __func__, __LINE__,		\
 		    "VERIFY3(" #LEFT " "  #OP " "  #RIGHT ") "		\
 		    "failed (%llu " #OP " %llu)\n",			\
 		    (unsigned long long)(_verify3_left),		\
@@ -123,7 +123,7 @@ spl_assert(const char *buf, const char *file, const char *func, int line)
 		const uintptr_t _verify3_left = (uintptr_t)(LEFT);	\
 		const uintptr_t _verify3_right = (uintptr_t)(RIGHT);	\
 		if (unlikely(!(_verify3_left OP _verify3_right)))	\
-		    spl_panic(__FILE__, __FUNCTION__, __LINE__,		\
+		    spl_panic(__FILE__, __func__, __LINE__,		\
 		    "VERIFY3(" #LEFT " "  #OP " "  #RIGHT ") "		\
 		    "failed (%px " #OP " %px)\n",			\
 		    (void *) (_verify3_left),				\
@@ -134,7 +134,7 @@ spl_assert(const char *buf, const char *file, const char *func, int line)
 		const int64_t _verify3_left = (int64_t)(0);		\
 		const int64_t _verify3_right = (int64_t)(RIGHT);	\
 		if (unlikely(!(_verify3_left == _verify3_right)))	\
-		    spl_panic(__FILE__, __FUNCTION__, __LINE__,		\
+		    spl_panic(__FILE__, __func__, __LINE__,		\
 		    "VERIFY0(0 == " #RIGHT ") "				\
 		    "failed (0 == %lld)\n",				\
 		    (long long) (_verify3_right));			\
@@ -143,12 +143,12 @@ spl_assert(const char *buf, const char *file, const char *func, int line)
 #define	VERIFY_IMPLY(A, B) \
 	((void)(likely((!(A)) || (B)) ||				\
 	    spl_assert("(" #A ") implies (" #B ")",			\
-	    __FILE__, __FUNCTION__, __LINE__)))
+	    __FILE__, __func__, __LINE__)))
 
 #define	VERIFY_EQUIV(A, B) \
 	((void)(likely(!!(A) == !!(B)) || 				\
 	    spl_assert("(" #A ") is equivalent to (" #B ")",		\
-	    __FILE__, __FUNCTION__, __LINE__)))
+	    __FILE__, __func__, __LINE__)))
 
 /*
  * Debugging disabled (--disable-debug)
diff --git a/lib/libspl/include/assert.h b/lib/libspl/include/assert.h
index af4957dfb..c3a06c119 100644
--- a/lib/libspl/include/assert.h
+++ b/lib/libspl/include/assert.h
@@ -69,17 +69,17 @@ libspl_assert(const char *buf, const char *file, const char *func, int line)
 
 #define	VERIFY(cond)							\
 	(void) ((!(cond)) &&						\
-	    libspl_assert(#cond, __FILE__, __FUNCTION__, __LINE__))
+	    libspl_assert(#cond, __FILE__, __func__, __LINE__))
 #define	verify(cond)							\
 	(void) ((!(cond)) &&						\
-	    libspl_assert(#cond, __FILE__, __FUNCTION__, __LINE__))
+	    libspl_assert(#cond, __FILE__, __func__, __LINE__))
 
 #define	VERIFY3B(LEFT, OP, RIGHT)					\
 do {									\
 	const boolean_t __left = (boolean_t)(LEFT);			\
 	const boolean_t __right = (boolean_t)(RIGHT);			\
 	if (!(__left OP __right))					\
-		libspl_assertf(__FILE__, __FUNCTION__, __LINE__,	\
+		libspl_assertf(__FILE__, __func__, __LINE__,	\
 		    "%s %s %s (0x%llx %s 0x%llx)", #LEFT, #OP, #RIGHT,	\
 		    (u_longlong_t)__left, #OP, (u_longlong_t)__right);	\
 } while (0)
@@ -89,7 +89,7 @@ do {									\
 	const int64_t __left = (int64_t)(LEFT);				\
 	const int64_t __right = (int64_t)(RIGHT);			\
 	if (!(__left OP __right))					\
-		libspl_assertf(__FILE__, __FUNCTION__, __LINE__,	\
+		libspl_assertf(__FILE__, __func__, __LINE__,	\
 		    "%s %s %s (0x%llx %s 0x%llx)", #LEFT, #OP, #RIGHT,	\
 		    (u_longlong_t)__left, #OP, (u_longlong_t)__right);	\
 } while (0)
@@ -99,7 +99,7 @@ do {									\
 	const uint64_t __left = (uint64_t)(LEFT);			\
 	const uint64_t __right = (uint64_t)(RIGHT);			\
 	if (!(__left OP __right))					\
-		libspl_assertf(__FILE__, __FUNCTION__, __LINE__,	\
+		libspl_assertf(__FILE__, __func__, __LINE__,	\
 		    "%s %s %s (0x%llx %s 0x%llx)", #LEFT, #OP, #RIGHT,	\
 		    (u_longlong_t)__left, #OP, (u_longlong_t)__right);	\
 } while (0)
@@ -109,7 +109,7 @@ do {									\
 	const uintptr_t __left = (uintptr_t)(LEFT);			\
 	const uintptr_t __right = (uintptr_t)(RIGHT);			\
 	if (!(__left OP __right))					\
-		libspl_assertf(__FILE__, __FUNCTION__, __LINE__,	\
+		libspl_assertf(__FILE__, __func__, __LINE__,	\
 		    "%s %s %s (0x%llx %s 0x%llx)", #LEFT, #OP, #RIGHT,	\
 		    (u_longlong_t)__left, #OP, (u_longlong_t)__right);	\
 } while (0)
@@ -118,7 +118,7 @@ do {									\
 do {									\
 	const uint64_t __left = (uint64_t)(LEFT);			\
 	if (!(__left == 0))						\
-		libspl_assertf(__FILE__, __FUNCTION__, __LINE__,	\
+		libspl_assertf(__FILE__, __func__, __LINE__,	\
 		    "%s == 0 (0x%llx == 0)", #LEFT,			\
 		    (u_longlong_t)__left);				\
 } while (0)
@@ -154,11 +154,11 @@ do {									\
 #define	IMPLY(A, B) \
 	((void)(((!(A)) || (B)) || \
 	    libspl_assert("(" #A ") implies (" #B ")", \
-	    __FILE__, __FUNCTION__, __LINE__)))
+	    __FILE__, __func__, __LINE__)))
 #define	EQUIV(A, B) \
 	((void)((!!(A) == !!(B)) || \
 	    libspl_assert("(" #A ") is equivalent to (" #B ")", \
-	    __FILE__, __FUNCTION__, __LINE__)))
+	    __FILE__, __func__, __LINE__)))
 
 #endif  /* NDEBUG */
 
diff --git a/module/os/freebsd/zfs/crypto_os.c b/module/os/freebsd/zfs/crypto_os.c
index 1f139ea5b..c945a155f 100644
--- a/module/os/freebsd/zfs/crypto_os.c
+++ b/module/os/freebsd/zfs/crypto_os.c
@@ -227,7 +227,7 @@ freebsd_crypt_uio_debug_log(boolean_t encrypt,
 
 	printf("%s(%s, %p, { %s, %d, %d, %s }, %p, { %p, %u }, "
 	    "%p, %u, %u)\n",
-	    __FUNCTION__, encrypt ? "encrypt" : "decrypt", input_sessionp,
+	    __func__, encrypt ? "encrypt" : "decrypt", input_sessionp,
 	    c_info->ci_algname, c_info->ci_crypt_type,
 	    (unsigned int)c_info->ci_keylen, c_info->ci_name,
 	    data_uio, key->ck_data,
@@ -263,7 +263,7 @@ freebsd_crypt_newsession(freebsd_crypt_session_t *sessp,
 
 #ifdef FCRYPTO_DEBUG
 	printf("%s(%p, { %s, %d, %d, %s }, { %p, %u })\n",
-	    __FUNCTION__, sessp,
+	    __func__, sessp,
 	    c_info->ci_algname, c_info->ci_crypt_type,
 	    (unsigned int)c_info->ci_keylen, c_info->ci_name,
 	    key->ck_data, (unsigned int)key->ck_length);
@@ -328,7 +328,7 @@ freebsd_crypt_newsession(freebsd_crypt_session_t *sessp,
 bad:
 #ifdef FCRYPTO_DEBUG
 	if (error)
-		printf("%s: returning error %d\n", __FUNCTION__, error);
+		printf("%s: returning error %d\n", __func__, error);
 #endif
 	return (error);
 }
@@ -384,7 +384,7 @@ freebsd_crypt_uio(boolean_t encrypt,
 out:
 #ifdef FCRYPTO_DEBUG
 	if (error)
-		printf("%s: returning error %d\n", __FUNCTION__, error);
+		printf("%s: returning error %d\n", __func__, error);
 #endif
 	if (input_sessionp == NULL) {
 		freebsd_crypt_freesession(session);
@@ -406,7 +406,7 @@ freebsd_crypt_newsession(freebsd_crypt_session_t *sessp,
 
 #ifdef FCRYPTO_DEBUG
 	printf("%s(%p, { %s, %d, %d, %s }, { %p, %u })\n",
-	    __FUNCTION__, sessp,
+	    __func__, sessp,
 	    c_info->ci_algname, c_info->ci_crypt_type,
 	    (unsigned int)c_info->ci_keylen, c_info->ci_name,
 	    key->ck_data, (unsigned int)key->ck_length);
@@ -460,7 +460,7 @@ freebsd_crypt_newsession(freebsd_crypt_session_t *sessp,
 #ifdef FCRYPTO_DEBUG
 	printf("%s(%d): Using crypt %s (key length %u [%u bytes]), "
 	    "auth %s (key length %d)\n",
-	    __FUNCTION__, __LINE__,
+	    __func__, __LINE__,
 	    xform->name, (unsigned int)key->ck_length,
 	    (unsigned int)key->ck_length/8,
 	    xauth->name, xauth->keysize);
@@ -483,7 +483,7 @@ freebsd_crypt_newsession(freebsd_crypt_session_t *sessp,
 	    CRYPTOCAP_F_HARDWARE | CRYPTOCAP_F_SOFTWARE);
 	if (error != 0) {
 		printf("%s(%d):  crypto_newsession failed with %d\n",
-		    __FUNCTION__, __LINE__, error);
+		    __func__, __LINE__, error);
 		goto bad;
 	}
 	sessp->fs_sid = sid;
@@ -563,7 +563,7 @@ freebsd_crypt_uio(boolean_t encrypt,
 #ifdef FCRYPTO_DEBUG
 	printf("%s(%d): Using crypt %s (key length %u [%u bytes]), "
 	    "auth %s (key length %d)\n",
-	    __FUNCTION__, __LINE__,
+	    __func__, __LINE__,
 	    xform->name, (unsigned int)key->ck_length,
 	    (unsigned int)key->ck_length/8,
 	    xauth->name, xauth->keysize);
@@ -597,7 +597,7 @@ freebsd_crypt_uio(boolean_t encrypt,
 	auth_desc->crd_alg = xauth->type;
 #ifdef FCRYPTO_DEBUG
 	printf("%s: auth: skip = %u, len = %u, inject = %u\n",
-	    __FUNCTION__, auth_desc->crd_skip, auth_desc->crd_len,
+	    __func__, auth_desc->crd_skip, auth_desc->crd_len,
 	    auth_desc->crd_inject);
 #endif
 
@@ -611,7 +611,7 @@ freebsd_crypt_uio(boolean_t encrypt,
 
 #ifdef FCRYPTO_DEBUG
 	printf("%s: enc: skip = %u, len = %u, inject = %u\n",
-	    __FUNCTION__, enc_desc->crd_skip, enc_desc->crd_len,
+	    __func__, enc_desc->crd_skip, enc_desc->crd_len,
 	    enc_desc->crd_inject);
 #endif
 
@@ -628,7 +628,7 @@ out:
 bad:
 #ifdef FCRYPTO_DEBUG
 	if (error)
-		printf("%s: returning error %d\n", __FUNCTION__, error);
+		printf("%s: returning error %d\n", __func__, error);
 #endif
 	return (error);
 }
diff --git a/module/os/freebsd/zfs/zfs_vfsops.c b/module/os/freebsd/zfs/zfs_vfsops.c
index a972c720d..2d54636bb 100644
--- a/module/os/freebsd/zfs/zfs_vfsops.c
+++ b/module/os/freebsd/zfs/zfs_vfsops.c
@@ -262,7 +262,7 @@ zfs_getquota(zfsvfs_t *zfsvfs, uid_t id, int isgroup, struct dqblk64 *dqp)
 	if ((error = zap_lookup(zfsvfs->z_os, quotaobj,
 	    buf, sizeof (quota), 1, &quota)) != 0) {
 		dprintf("%s(%d): quotaobj lookup failed\n",
-		    __FUNCTION__, __LINE__);
+		    __func__, __LINE__);
 		goto done;
 	}
 	/*
@@ -273,7 +273,7 @@ zfs_getquota(zfsvfs_t *zfsvfs, uid_t id, int isgroup, struct dqblk64 *dqp)
 	error = zap_lookup(zfsvfs->z_os, usedobj, buf, sizeof (used), 1, &used);
 	if (error && error != ENOENT) {
 		dprintf("%s(%d):  usedobj failed; %d\n",
-		    __FUNCTION__, __LINE__, error);
+		    __func__, __LINE__, error);
 		goto done;
 	}
 	dqp->dqb_curblocks = btodb(used);
diff --git a/module/os/freebsd/zfs/zio_crypt.c b/module/os/freebsd/zfs/zio_crypt.c
index b08916b31..204666957 100644
--- a/module/os/freebsd/zfs/zio_crypt.c
+++ b/module/os/freebsd/zfs/zio_crypt.c
@@ -409,7 +409,7 @@ zio_do_crypt_uio_opencrypto(boolean_t encrypt, freebsd_crypt_session_t *sess,
 	if (ret != 0) {
 #ifdef FCRYPTO_DEBUG
 		printf("%s(%d):  Returning error %s\n",
-		    __FUNCTION__, __LINE__, encrypt ? "EIO" : "ECKSUM");
+		    __func__, __LINE__, encrypt ? "EIO" : "ECKSUM");
 #endif
 		ret = SET_ERROR(encrypt ? EIO : ECKSUM);
 	}
@@ -1176,7 +1176,7 @@ zio_crypt_do_indirect_mac_checksum_impl(boolean_t generate, void *buf,
 
 	if (memcmp(digestbuf, cksum, ZIO_DATA_MAC_LEN) != 0) {
 #ifdef FCRYPTO_DEBUG
-		printf("%s(%d): Setting ECKSUM\n", __FUNCTION__, __LINE__);
+		printf("%s(%d): Setting ECKSUM\n", __func__, __LINE__);
 #endif
 		return (SET_ERROR(ECKSUM));
 	}
@@ -1700,7 +1700,7 @@ zio_do_crypt_data(boolean_t encrypt, zio_crypt_key_t *key,
 
 #ifdef FCRYPTO_DEBUG
 	printf("%s(%s, %p, %p, %d, %p, %p, %u, %s, %p, %p, %p)\n",
-	    __FUNCTION__,
+	    __func__,
 	    encrypt ? "encrypt" : "decrypt",
 	    key, salt, ot, iv, mac, datalen,
 	    byteswap ? "byteswap" : "native_endian", plainbuf,
-- 
2.37.3

